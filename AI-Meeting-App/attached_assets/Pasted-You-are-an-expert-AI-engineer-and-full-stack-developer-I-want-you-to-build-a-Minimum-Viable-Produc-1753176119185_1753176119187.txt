You are an expert AI engineer and full-stack developer.

I want you to build a Minimum Viable Product (MVP) of an AI-powered meeting assistant for sales teams, inspired by Sybill.ai. This platform will allow users to upload or record a meeting audio, transcribe it, summarize it, and extract important action items and insights.

Key Features to include:

Meeting Upload: Web UI for users to upload meeting audio files (MP3/WAV).

Automated Transcription: Use a third-party Automatic Speech Recognition API (like OpenAI Whisper, AssemblyAI, or Deepgram) to transcribe the audio to text.

AI Summarization: Use an LLM (e.g., OpenAI GPT-4 API) to analyze the transcript and generate:

A concise summary

Key outcomes and next steps

Pain points raised by the prospect

Any objections or questions

Dashboard: Display a list of processed meetings with summaries for each.

Persistent Storage: Store meeting audio (or links), transcripts, and summaries in a simple database (e.g., SQLite or PostgreSQL).

Clean Codebase: Well-structured code with clear separation of frontend, backend, and config (API keys in environment variables).

Deployment-friendly: Ready to run on Replit or Bolt.new, with a requirements.txt or package.json as needed.

Tech Stack:

Backend/Server: Python (Flask or FastAPI), with endpoints for upload, transcription, and summarization.

Frontend: Simple React.js or HTML/JS if minimal, connected to the backend via REST API.

Database: SQLite for MVP.

External APIs: Use AssemblyAI or OpenAI Whisper for ASR; OpenAI GPT-4 for summarization.

Implementation Details:

The file upload component should POST audio to the backend.

The backend should process audio asynchronously (showing "processing..." on frontend).

The backend stores and returns transcript and summary per meeting.

Show a list of past meetings; clicking an item shows full transcript and AI insights.

Make code modularâ€”separate api.py, model.py, frontend/static/, config.py.

Add README with setup instructions.

For API usage, wrap keys as environment variables.

Sample AI Summarization Prompt:

"You're a smart AI sales assistant. Summarize this meeting transcript. Include: 1) a concise meeting summary, 2) key outcomes and next steps, 3) pain points mentioned by the prospect, 4) any objections or follow-up questions."

How to Run:

The output should include all needed files (backend, frontend, requirements.txt, README), and instructions for running locally, on Replit, and for migration to Bolt.new.

Stretch Goals (optional):

Basic user authentication/login

Email integration for sending follow-ups

API endpoint for exporting summaries

Please generate the full codebase including:

All backend and frontend files

A .env.example file with placeholders for needed API keys

A brief setup guide in README.md